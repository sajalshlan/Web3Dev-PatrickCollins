//It's going to be funnnn!

INTRO
Hardhat - a flexible JS based development environment to compile, deploy, test and debug EVM based smart contracts - makes things way easier!
Hardhat also comes built-in with Hardhat Network, a local Ethereum network designed for development. It allows you to deploy your contracts, run your tests and debug your code.



HARDHAT SETUP
yarn init (same as npm init)
yarn add --dev hardhat 
yarn hardhat (same as npx hardhat)

there are 2 types of files in node modules - one starting with '@' and others dont -> difference is that the ones starting with @ are the node modules by the offical teams.

all our compilation info is going to be stored in a folder named "artifacts".


HARDHAT SETUP TROUBLESHOOTING
1. sometimes when writing this in cli - yarn hardhat or npx hardhat -> we get a menu of options, that is good but sometimes we don't (error) coz we already have a hardhat config file somewhere else (maybe at a higher level) -> so in order to solve this, find and delete that config file. and for finding that, use -
npx hardhat --verbose
and then delete it 

2. when cloning a github repo, - for collaborating on already existing project, don't forget to npm install (or yarn) - to get all those needed node modules and dependencies in your local machine/repo 



DEPLOYING SIMPLESTORAGE FROM HARDHAT
Compile -> yarn hardhat compile
Deploy -> yarn hardhat run scripts/deploy.js



NETWORKS IN HARDHAT
In our hardhat config file, we by default have a - defaultNetwork: "hardhat" -> our local ethereum blockchain running in the background, akin to Ganache - comes with the RPC and PK, so don't have to add any.

so we can add different networks here and then deploy our smart contract on diff networks.
in terminal - yarn hardhat run scripts/deploy.js --network goerli
and goerli should be specified as a network in your config file

so specify - goerli : {
    url: GOERLI_RPC_URL,
    accounts: [],
    chainId: ,
}
account - list of accounts, for adding private key.
that's it, deploy now -> yarn hardhat run scripts/deploy.js --network goerli



PROGRAMATIC VERIFICATION
remember how when we check this deployed contract's address, there is the option of contract where our contract lies in its binary code format, and then we verify and publish and do all that stuff.
Let's see how we can do it in the code itself - to automatically verify right after we deploy.

we are learning to verify on etherscan, (can check for documentation>api for other block explorers, let's see for this one here), go to Etherscan>APIdocs
[https://docs.etherscan.io/v/goerli-etherscan/api-endpoints/contracts#verify-source-code]

we will add a plugin here - #hardhat-etherscan (you'll get it on hardhat documentation), so
    yarn add --dev @nomiclabs/hardhat-etherscan
    require("@nomiclabs/hardhat-etherscan") [in hardhat config file]

Now we need a etherscan API key - get it from etherscan, add that to your env file and then hardhat config file and then create the verify function, call that at the end of the main function, but also add the error possibility that the contract we are trying to verify could already be verifed, and when calling this verify() in main(), see that it won't work out with local hardhat network -> for that, import network and check with chainId, so yeah that's pretty much it!

    at the top:
    const { ethers, run, network } = require("hardhat")


    if (network.config.chainId === 5 && process.env.ETHERSCAN_API_KEY) {
        await simpleStorage.deployTransaction.wait(6)
        await verify(simpleStorage.address, [])
        }

    async function verify(contractAddress, args) {
        console.log("verifying contract ...")
        try {
         await run("verify:verify", {
                address: contractAddress,
                constructorArguements: args,
            })
        } catch (e) {
          if (e.message.toLowerCase().includes("already verified")) {
                console.log("already verified!")
            } else {
                console.log(e)
            }
        }
    }



INTERACTING WITH CONTRACTS IN HARDHAT
same as before



ARTIFACTS TROUBLESHOOTING
just delete the artifacts folder and run our deploy cmd (it will compile the code and generate the artifacts folder itself at first)



CUSTOM HARDHAT TASKS
when you do yarn hardhat, it shows you a menu, a list of tasks that can be performed - we can increase these tasks by adding plugins.
we can even write our own tasks.

make a folder - tasks/block-number.js
    const { task } = require("hardhat/config");

    task("block-number", "Prints the current block number").setAction(
        async (taskArgs, hre) => {
        const blockNumber = await hre.ethers.provider.getBlockNumber();
        console.log(`Current block number: ${blockNumber}`);
        }
    );

    module.exports = {};    

scripts and tasks both can be used - prefer scripts for your own local dev env and tasks for plugins.



HARDHAT LOCALHOST NODE
yarn hardhat node -> runs a local blockchain node that you can interact with - giving you a localhost RPC URL and accounts with PK, and logging info when you make transactions using this local network (just define it first in the config file).

    networks: {
        goerli: {
            url: GOERLI_RPC_URL,
            accounts: [PRIVATE_KEY],
            chainId: 5,
        },
        localhost: {
            url: "http://127.0.0.1:8545/",
            //accounts: thanks hardhat!,
            chainId: 31337,
        },
    }


HARDHAT CONSOLE
a JS environment for us to run JS cmds to interact with any blockchain.
    yarn hardhat console --network localhost
works with any network



RUNNING TESTS
an important site - rekt having the list of all hacked contracts and how they got hacked - should read to learn writing better tests and better smart contracts.

make a file - tests/test-deploy.js -> using Mocha as our JS based test framework and Chai as our JS based assertion library along with Mocha.

    const { ethers } = require("hardhat")
    const { expect, assert } = require("chai")

    describe("SimpleStorage", function () {
    //making these variables global so that later the it() test can also access them

    let simpleStorageFactory, simpleStorage
    
    beforeEach(async function () {
        simpleStorageFactory = await ethers.getContractFactory("SimpleStorage")
        simpleStorage = await simpleStorageFactory.deploy()
    })

    it("should start with a fav number of 0", async function () {
        const currentValue = await simpleStorage.retrieve()
        const expectedValue = "0"

        //toString() as the currentValue is going to be a big number
        assert.equal(currentValue.toString(), expectedValue)
    })

    it("should update when we call store", async function () {
        const expectedValue = "7"
        const transactionResponse = await simpleStorage.store(expectedValue)
        await transactionResponse.wait(1)

        const updatedValue = await simpleStorage.retrieve()

        assert.equal(updatedValue.toString(), expectedValue)
    })
    })

    to run tests => yarn hardhat test

to only run a specific test, use -> yarn hardhat test --grep store
after grep - write the keywords that would be in that test, and it will pick up that test or do it.only() in the test file itself, and it will only run that test by default.



HARDHAT GAS REPORTER
an extension that gets with our tests and tells us how much gas each function costs
so when you'll run your tests (yarn hardhat test), it will give you a report in the terminal.
But better -> put the report in a file, add it to .gitignore, and use a currency by taking the API from coinmarketcap
    gasReporter: {
        enabled: false,
        outputFile: "gas-report.txt",
        noColors: true,
        currency: "USD",
        apiKey: COINMARKET_API_KEY,
        token: "MATIC",
    }

turn the enabled to false, whenever you dont want it



SOLIDITY COVERAGE 
a hardhat plugin / tool that goes to our tests and checks how many lines of our original smart contract are not covered thru these tests - hence showing what else needs to be covered/tested.

    So, first the 2 evergreen steps to do:
    1. yarn add --dev solidity-coverage
    2. require("solidity-coverage")         //in the hardhat config file

    3. yarn hardhat coverage

it will make a coverage folder and a coverage.json file -> add it to .gitignore



HARDHAT WAFFLE
 Waffle is a smart contract testing framework.
 In summary, if you're starting a new project and you want to use modules in the browser, and you don't want to spend a lot of time configuring your tooling, then Browserify might be a good choice. On the other hand, if you're working on a more complex project and you want more control over how your code is processed and bundled, then Webpack might be a better fit.