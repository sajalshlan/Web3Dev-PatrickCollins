Blockchain was introduced for Bitcoin first
But in 2014, Vitalik took this idea forward and with other cofounders released Ethereum in 2015 - adding the concept of decentralized organizations and decentralized agreements(smart contracts) with its Blockchain.

Originally Nick Szabo came with the idea of smart contracts in 1994.
[Do read about him]

therefore the main difference between the bitcoin protocol and the ethereum protocol is Smart contracts

basically bitcoin does have smart contracts but they are intentionally turing incomplete - meaning they don't have all the functionality that a programming language would give them
this is coz bitcoin devs saw bitcoin blockchain as a store of value while ethereum devs saw it as both store of value and a utility for facilitating the decentralized concept



The Oracle Problem:
Blockchain needs real world data inorder to work full-fledgedly but it itself can't interact with the real world 

*Blockchain Oracle - any device that interacts with the off-chain world(real world) and provides external data and external computations to the smart contracts(blockchain).
but we can't rely on a single oracle to provide this - can't stay truly decentralized when we only have one oracle, can we? 

therefore we should have decentralized oracles bringing external data and external computations to the smart contracts - making sure we are decentralized end to end
hence mixing both decentralized blockchain with decentralized oracle network gives rise to the concept of Hybrid smart contracts.

Hybrid Smart Contracts = OnChain + OffChain Agreements
(onchain code + offchain systems[triggering the onchain system, take actions on behalf of the contract, return proof that the action was taken])
[check this - https://blog.chain.link/hybrid-smart-contracts-explained/]

*dApp - decentralized applications - mainly the combination of many smart contracts
dapp = decentralized applications = decentralized protocol = smart contract

////

WHAT IS THE PURPOSE OF SMART CONTRACTS?
They create trust minimized agreements giving rise to unbreakable promises - speed, efficiency, immutability and transparency



SMART CONTRACT
An agreement, contract, or set of instructions that is deployed on a decentralized blockchain
- cannot be altered(immutable)
- automatically executes
- everyone sees the terms of the agreement



EtherScan
A Block explorer - a way to view different address, transactions and other happenings that happen with a blockchain



Introduction to Gas
When we make transactions, the miners or validators make a small fee, the fee depends on how much of gas you use

Gas: a unit of computational measurement
the more complex your transaction is, the more gas you have to pay.
Transaction price = Gas Price x Gas usage

Depending on how busy the blockchain is, how much traffic the network has - you have to pay more gas fee
more people sending transactions at the same time means more gas costs

 

HOW DO BLOCKCHAIN WORKS
The Genesis block - first block in the blockchain

Hash: Unique fixed length string to identify a piece of data

Hash Algorithm: A algorithm/function that computes the data into a unique hash

Mining: The process of finding the "solution" to the blockchain "problem".
        here, problem was to find a hash that starts with four zeroes
        [problems can be different depending on blockchain to blockchain]

        Nodes get paid for mining blocks

Block: A list of transactions mined together

Decentralized: having no single point of authority

Nonce: A "number used once" to find the "solution" to the blockchain problem.
       Also used to define the number of transactions for an account/address (in ethereum).

the last block's hash of each peer is compared and verified and if any of the peers had done something malicious/changed some data - then the hash of that block will change -> changing the hashes of all the block ahead of it, therefore last block's hash won't match other peers last block's hash.

that peer will be thrown out - as its whole blockchain will get invalidated - as changing data -> now we have to compute/mine a new nonce that will along with data and block number give us a new hash starting with 0000 - now same process with all the blocks following/ahead of that block - already enough computatinal power needed 


now it explains my doubt of what is a 51% attack?
basically if 51% of the peer network collectively changes the data, they'll succeed while throwing off the remaining good 49% peers. not possible though to generate enough computational power collectively as changing data and generating a new nonce so that the hash starts with 4 zeroes requires computational power.

The longer the blockchain gets, the harder it begins to tamper with and it becomes more secure



SIGNING TRANSACTIONS
Private Key: Only known to the key holder, it's used to "sign" transactions

Public Key: Anyone can see it, and it is used to verify that a transaction came from you - is derived from private key

Signing a transaction: A "one way process" (meaning you can't obtain private key again) - a private key hashed with transaction data is used as a "message signature" - then anyone can verify this transaction hash (message signature) using our public key. 

Private key is used to generate the public key using the Elliptical Curve Digital Signature Algorithm, a variant of the Digital Signature Algorithm(DSA - which uses elliptic curve cryptography) - both Bitcoin and Ethereum uses this algorithm

Your address in Ethereum is derived when your public key is hashed with Keccak256 hashing algorithm and taking the last 20bits

Private key > Public Key > Address



GAS II: BLOCK REWARDS & EIP 1559
Base Fee: The minimum *gas price* to send your transaction

EIP 1559 - Ethereum Improvement Proposal
This one's for the gas fee model

But will EIP 1559 make gas fee lower?
NO -> rather it will optimize the existing gas fee structure
- 1. Smoothening gas fee spikes
  2. Limiting the number of overpaid transactions.

Basically, acc to this proposal => instead of the existing model where the user giving the highest bid of gas fee wins and therefore his/her transaction is included in the block/priortized, where the ones who already gave the older gas fee have to wait a long long time now - the new model says that when the traffic starts increasing in the network, first the block size is increased** - increasing the capacity of gas and number of transactions that can be included -> and subsequently the base gas fee is increased -> therefore after 20 blocks it will increase by 50x, and so on and therefore will remove users from participating, hence decreasing the traffic
also, earlier the gas fee and the block reward was given to the miner but now the gas fee is burnt, that is making the overall availability of ethereum low, hence benefitting users as the eth they hold are of a greater value now, and the miners get the block reward and miner tip, that a user can decide the amount of -> hence low profit for the miners.

**IF the blocks are less than 50% full -> gas fee decreases
  IF the blocks are more than 50% full -> gas fee increases

BUT the way to lower the gas fee is eth2.0 and layer2 solutions

*Transaction Fee: (Block BaseFee Per Gas + MaxPriorityFee Per Gas)  *  Gas used
*Gas Price: Cost of one unit of gas
*Gas Limit: Maximum amount of units of gas we are willing to pay in this transaction



HIGH LEVEL BLOCKCHAIN FUNDAMENTALS
Node means one of the server out of all those servers on which the blockchain is running
Anyone can join these networks and participate

*Consensus - mechanism used to agree on the state of a blockchain
Consensus protocol can be broken down roughly into 2 parts:
1. Chain Selection  ALgo - the chain with highest number of blocks or the longest blockchain will be used.
2. Sybil Resistance - roughly a way of defending against somebody making a bunch of fake blockchains for the rewards - includes POW and POS

Consensus is often confused with POW, but Consensus consists of both the things mentioned above, and currently Bitcoin uses Nakamoto Consensus which involves longest chain selection and POW.

Who's getting paid?
In POW - miners
In POS - validators

2 types of Attacks in POW:
1. Sybil Attack- when a single person or a single node tries to affect the decentrality of the network by pretending to be multiple different people - which is very difficult in POW and POS
2. 51% attack - basically if 51% of the nodes team up and influence the chain in their direction - can't because of the longest chain selection mechanism 


**
Sybil resistance is a property of blockchain systems that helps prevent malicious actors from taking control of the network by creating a large number of fake identities, also known as Sybil attacks.

In a Sybil attack, an attacker creates multiple fake identities, or "sybils," and uses them to control a significant portion of the network's resources or gain an unfair advantage. For example, the attacker may use their Sybil identities to launch a 51% attack, in which they control the majority of the network's computing power and can manipulate transaction records.

To prevent Sybil attacks, blockchain systems typically use a consensus mechanism that requires nodes to prove their identity and computing power in some way. For example, Proof of Work (PoW) requires nodes to solve complex mathematical problems to prove that they have invested computational resources in the network, while Proof of Stake (PoS) requires nodes to lock up a certain amount of cryptocurrency to participate in consensus.

By making it difficult or costly for an attacker to create a large number of fake identities, Sybil resistance helps ensure the integrity and security of the blockchain network.


*POW and POS are Sybil Resistance mechanisms.

Drawback of POW - uses a lot of energy 

POS - nodes put up collateral as a sybil Resistance mechanism
    - Miners are called validators - as they're not longer mining anything, rather just validating other nodes.
    - unlike pow, where miners used to race to validate the block - here validators are chosen at random to propose the new block and other validtors verify
    - uses much less energy -> as instead of every node on the network trying to mine it, only one node at random is chosen and rest need to validate 

Randomness is actually a very imp topic when we are talking about these deterministic systems called as blockchains

Drawbacks of POS - considered as slightly less decentralized because of the upfront costs it cost to participate 

*Scalability
Blockchain is not so scalable rn as when the transactions increase, coz of the block size the gas price skyrockets which is preventing from more traffic/more users to get into the Blockchain.
Sharding and Rollups are 2 scalablility solutions
Ethereum's solution to the scalablility problem is Sharding.

Sharding: A sharded blockchain means there is going to be blockchain of blockchains
         - a main chain that is going to coordinate everything amongst several chains that hook into this main chain
         - more blockchains > more blocks > more transactions can be included


 Sharding can greatly increase the number of transactions on layer 1

 *Layers
 Layer1 - Base Layer Blockchain solutions 
        - ex: Bitcoin, Ethereum, Avalanche

Layer2 - any application build on top of layer1
       - ex: Chainlink, Arbitrage, Optimism

Arbitrage & Optimism are Rollups built on top of Ethereum

Rollups - A sharded blockchain built on top of a layer1 blockchain
        - they derive their security from base layer(i.e layer1 - ethereum here)
        - bulk send their transactions onto the layer1
        - solving scalablility issues by being a blockchain people can make transaction on, still on this base Ethereum layer

Rollups are different from Sidechains as Sidechains derive their security from their own protocols, while rollups derive their security from the base layers      




//Extra infos:

DIFF BETWEEN MOCHA, CHAI AND WAFFLE:

        Mocha is a testing framework.

        It provides:

        tools for setting up test suites and cases (describe/context, it/test, hooks for setup and tear down like before/after[each/all])

        a test runner which will execute the test suited and cases

        some other bits like coverage reporting (how much if codebase is “covered” by tests), global configuration etc

        It is very flexible and allows you to use any assertion library you want within the test cases.


        Chai is an assertion library

        Assertion libraries provide tools called matchers for asserting whether the output/result of a call (any expression) in a test matches what you expect.

        Chai comes with common matchers for numbers, strings, objects etc.

        Chai works with the expect function which wraps around some call you make and then let’s you chain the matchers onto it.


        Waffle is a matcher library *that extends Chai to provide matchers specifically for testing EVM contract interactions

        While Chai gives you the core matchers, Waffle extends it to give you matchers for BigNumber, accounts (as hex strings), balances (for ERC20/721 etc), event emitting and so forth. These are things you could match with Chai alone but instead of reinventing the wheel you just use Waffle. Check out the waffle Chai matchers docs they have great examples.


        *Waffle is itself a framework that wraps mocha/chai, solc (for compiling contracts) and more. But where I’ve seen it used most is with its chai matchers giving those other responsibilities to truffle/hardhat.


        EthersJS is like an ORM for the EVM

        If you’re not familiar with databases and ORMs then the simplest explanation is that it’s a converter (“mapper”) from one domain to another. A DB ORM will convert from database representation (documents, rows/columns etc) into an object representation in your domain (JS in this case).

        So ethers is a tool to convert EVM / contract / account representation into JS objects. It lets you treat a contract, account etc as a JS object and interact with it through its properties and methods.

        Beyond the mapping it gives you the ability to configure the connection (through Providers), common utilities for interacting with EVM chain data, wallet/keypair generation etc.

        It’s also got some pretty decent docs and (imo) a cleaner API than web3.

        If you are using hardhat then ethers will be wrapped by the hardhat runtime environment (HRE) so the provider is already configured and a bunch of convenience utilities are added to ethers (for deploying / loading contracts).

        [https://www.reddit.com/r/solidity/comments/vakaze/mocha_waffle_chai_and_ethers_js/]

Ques: Wonderful. BTW what other sources has the right info about all these tools other than docs!? Any advice?

Ans: Man idk. Just docs and building / using them. Like just start coding and search along the way.
Maybe you can find example projects with tests too. But for me it was just experiential.