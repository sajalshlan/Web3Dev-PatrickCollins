Its going to be superrrr fun!!!
It is the flagship project, if you learn this, then you have the skills to learn all the rest of the smart contract concepts 

HARDHAT SETUP
    yarn init
    yarn add --dev hardhat
    yarn hardhat > select a empty hardhat file, then copy the dependancies from source code(you can see what dependancies we installed in package.json file)

    then copy paste dependancies from the fcc github:

    yarn add --dev @nomiclabs/hardhat-ethers@npm:hardhat-deploy-ethers ethers @nomiclabs/hardhat-etherscan @nomiclabs/hardhat-waffle chai ethereum-waffle hardhat hardhat-contract-sizer hardhat-deploy hardhat-gas-reporter prettier prettier-plugin-solidity solhint solidity-coverage dotenv



RAFFLE.SOL SETUP
Now always comment and write in the start of your contract that what are you building - break them down into small goals/fncs

now entranceFee variable, with a visibility and make it storage variable first with adding the prefix "s_" with it
now we will set it every time a contract is deployed, so let's make it immutable by changing its name as - "i_entranceFee" and adding the keyword immutable at the this variable's declaration.

Now using the Chainlink Solidity Style Guide, we should return this entranceFee, as in users should be able to see it, so defining a function at last that returns this enterance fees.

Now in enterRaffle function, we need to do same as in fund function, that is require that msg.value<enterance fee, but let's do it in a more gas optimizing way using custom error, instead of require statements and storing that big string as our revert message.

NOW declare a players array and make it payable as we'll be paying the winner.
same return function for players at last and push msg.sender to players array in enterRaffle fnc.



INTRODUCTION TO EVENTS
Whenever we update any dynamic object like array or mapping, we need to omit an event.
EVM logs all its details of the transaction in a data structure called "log"! and inside this log is an imp piece of logging called events.

Events allow you to print info to this log, and is gas efficient as instead saving this info in storage variables

Log and event live in a special data structure that isn't accessible to smart contracts, that is why it's cheaper -> Smart Contracts can't access logs.

Each event is tied to the smart contract or account address that emitted this event in these transactions.

The Graph listens to these events and stores them in the graph so that they're easy to query later on/

When defining an event, you can have 2 types of parameters, indexed and non-indexed. We can have upto 3 indexed parameters, which are also called as topics; they are easily searchable and much easier to query than the non-indexed parameter

Then we emit, similar to calling a fnc, and we are telling it to store the data into the logging data structure of EVM, by emitting an event.
Now the non-indexed parameters gets stored as ABI encoded index parameters, meaning -> we took those non-indexed parameters, matched them together with their ABI, pumped them thru an encoding algorithm and at the end what we get is stored in the log data structure which we can also see on etherscan.
If you have the ABI, they are easy to decode, if not they're hard to and these non-indexed parameters cost less gas to pump into the logs.



EVENTS IN RAFFLE.SOL
Name events with the function name reversed.
        event RaffleEntry(address indexed player);

        emit RaffleEntry(msg.sender);

Now it's a good practice to write your deploy scripts and test and the contracts all together and keep checking after every functions, but for simplicity, not gonna do here.



INTRODUCTION TO CHAINLINK VRF 
adding subscriber to get a random number section in chainlink docs.

[https://docs.chain.link/vrf/v2/introduction]

IMPLEMENTING CHAINLINK VRF
external functions are lil bit cheaper than public functions as it knows that our other functions in the smart contract are not going to call that
now let's go to pick a random number function.

now making it a 2 transaction process, will make it secure and harder to manipulate.
so renaming pickRandomWinner to requestRandomWinner and making another function where our request gets fulfilled.

ok now import chainlink VRFConsumerBaseV2 and then use the function fulfillRandomWinner by overriding it and use vrfCoordinator, calling it with the constructor and make sure to inherit - contract Raffle is VRFConsumerBaseV2.

and yea don't forget to yarn add --dev @chainlink/contracts.



HARDHAT SHORTHAND
A global npm package that installs a globally accessible binary called 'hh' that runs the project's locally installed hardhat and supports shell completion for tasks

yarn add global hardhat-shorthand

and now instead of 'yarn hardhat' you can use 'hh'.
eg - hh compile



IMPLEMENTING CHAINLINK VRF - The Request
ant shant

basically filling in the request function from get a random number docs, and taking in all the values in the constructor.

now using that i_vrfCoordinator.requestRandomWords() function, we will get back a request id, store it and use it in fulfill function and emit an event here - event RequestedRaffleWinner() and emit - emit RequestedRaffleWinner(requestId);



IMPLEMENTING CHAINLINK VRF - The fulfill

*Modulo
the random number array generated has 2 things in it, and it is uint256 so it will be very big, now what to do
we will use module here to get the index of the random winner and put it in our s_players array to get the address of the winner.

now, store that recent winner in an storage variable and make a return function, making it public to return the recent winner at the end.

Now transfer the funds to the recent winner's address.

now, create an error instead of the revert statement while transfering the funds.

and create an event to keep a history of all the winners

cool, now a warning in fulfillRandomWinner function - that we are taking the requestId but not using it, so to silence that, just comment out the name requestId.



INTRODUCTION TO CHAINLINK KEEPERS
now lets add keepers so that it automatically picks up the winner after some time and we don't have to interact with it
There are 2 steps to building a chainlink keeper upkeep smart contract:
1. write a smart contract that's compatible using checkUpKeep and performUpKeep method
2. register the smart contract with chainlink keepers network

refer - [https://docs.chain.link/chainlink-automation/introduction/]

import automation compatible interface and inherit our contract as we want to use the checkUpkeep and performUpkeep methods

here, just writing the checkUpKeep function.



ENUMS
what if instead of just true and false, we wanted to have many different states - open, closed, pending, calculating -> like 0 be pending, 1 be closed, 2 be open like that
so to keep track of all this, we use enums.

Enums can be used to create custom types with a finite set of 'constant values'

    enum RaffleState {
        OPEN,
        CALCULATING
    } //uint 0 = OPEN, 1 = CALCULATING

then define a variable of type RaffleState and pass RaffleState.OPEN with the constructor

now create if condition in enterRaffle function with this new state variable that if lottery is OPEN, then only you can enter, and revert with a new custom error.
similarly in requestRandomWinner function, switch the state to calculating so that other players can't enter



IMPLEMENTING CHAINLINK KEEPERS CONTINUED
write all those booleans in checkUpKeep, and then now for performUpKeep -> change the requestRandomWinner to performUpKeep:
so, call performUpKeep only when checkUpKeep returns true, so change visibility of checkupKeep from external to public

also, don't forget to reset s_lastTimeStamp



CODE CLEANUP
adding NATSPEC

also, while:
function getNumWords() public view returns(uint){
    return NUM_WORDS;
}
here we are returning NUM_WORDS which is a bytecode, a constant number and we are not returning it from storage, so we can make our function pure.



DEPLOYING RAFFLE.SOL
here, always check the contructor first, here we have one contract address for V2, which is outside our contract and we need to deploy a mock for that.

lets make a deploy folder
and lets start working with our raffle.sol's deployement

copy config boilerplate and .env files 
now done with the basic boilerplate:

    const { network } = require("hardhat")

    //module.exports = async({getNamedAccounts, deployments}) .....
    module.exports = async function ({ getNamedAccounts, deployments }) {
        const { deploy, log } = deployments
        const { deployer } = getNamedAccounts()

        const raffle = await deploy("Raffle", {
            from: deployer,
            args: [],
            log: true,
            waitConfirmations: network.config.blockConfirmations || 1,
        })
    }

Now lets deal with the arguments
Now first arg is that vrfV2Coordinator interface, now just like our fundME contract, we will use mocks if we are on local chain and actual contract addresses if we are on test net.

so making that helper-hardhat-config that will contain all the different contract address and other related things

and again for the mock contract, lets create - '00-deploy-mocks.js' 
and write it:

    import { network } from "hardhat"
    import { developmentChains } from "../helper-hardhat-config"

    module.exports = async function ({ getNamedAccounts, deployments }) {
        const { deploy, log } = deployments
        const { deployer } = await getNamedAccounts()
        const chainId = network.config.chainId

        if (developmentChains.includes(network.name)) {
            log("Local network detected, deploying mocks...")
            //deploy a mock vrf coordinator
        }
    }



MOCK CHAINLINK VRF COORDINATOR 
now made a VRFCoordinatorV2Mock.sol in contracts/test, imported from chainlink github.

now while deploying this contract in mocks script, arguments needed can be known by going to that V2 interface contract and seeing what parameters the constructor there takes.
there are 2 parameters - base fee and gas price link
base fee is that coordinator price fee, meaning we have to pay this base fee for every transaction.

*the reason vrf requests has a base fee while price feeds didn't have is because price feeds are sponsered by a group of protocols.
*chainlink nodes actually call the performUpKeep fnc and fulfillRandomWords fnc, so they pay the gas fee on the blockchain for which we beforehand pay the chainlink nodes in LINK, that they use for blockchain transaction, now gasPriceLink is the amount we keep as the extra safety price for whenever gas price increases/fluctuates, so that our chainlink nodes never go bankrupt.

so yea get those base fee and gas price link and pass in as args.



DEPLOYING RAFFLE.SOL CONTINUED
now, lets get all those arguements needed in our constructor function of the raffle contract.

1. V2 contract address - if condition that if on localnode, then get that mock contract, else get whatever network we are on.

2. entrance fee - lets define that in helper-hardhat-config - different for different chains
  then get that in our deploy script like:
    const entranceFee = networkConfig[chainId]["entranceFee"]

3. gasLane - grab them from the docs and add in helper-hardhat-config - doesn't really matter for our hardhat as we are mocking it, so write anything there - ez then pass to args 

4. subscriptionId - go to vrf.chain.link, for testnet we can get subscription id easily here and for that do the same, get from docs to helper-hardhat-config, BUT for hardhat node, we are going to learn to 100% programmatically create a subscription id and fund that subscription id, without the use of UI:

    in deploy-raffle script, inside the if(developmentChains...){
        create a subscription and that subscription emits an event which contains the subscriptionId, which we can get from there (see the code)

        now to fund the subscription, just use the function and our hardhat node doesn't need any LINK token like for testnet it does, so give anything
    }

5. callbackGasLimit - do same as gasLane

6. interval - same as gasLane, set as 30 seconds for both

Now what's left is that programmatic verification piece, so make a folder - utils/verify.js and copy from our fundME contract - then import it in our deploy script and use.



UNIT TESTS
