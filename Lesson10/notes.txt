//FINALLY FRONTEND HUAHAHAH

FIRST OPTIONAL SECTION: HOW TO CONNECT YOUR SMART CONTRACTS TO METAMASK - FRONTEND INTERGRATION
Basically these wallets in browser extension provides our global window object with a etherum (or solana) object, thru which we can connect to the blockchain node.
try out: window.etherum in console log of a browser.
Under the hood, these wallets have blockchain node connected to them and in order to interact with a blockchain we always need a node - like in backend, we use third party applications like Alchemy, Infura to rent out - HOW, read this: 

        `INFURA allows developers to access Ethereum and IPFS nodes through a simple API, rather than having to run their own node. By using INFURA, developers can connect to the Ethereum network without the need to set up and maintain their own node. This can be a significant cost-saving and time-saving measure, as running a node can be expensive and requires a certain level of technical expertise to set up and maintain.

        Instead of running their own node, developers can use INFURA's API to access the Ethereum network and perform various actions such as sending transactions, interacting with smart contracts, and querying the blockchain. This is similar to renting a node, as developers are able to access the resources of the node without having to own and maintain it themselves.

        Additionally, INFURA also provides developers with the ability to scale their dApps by providing access to a large number of nodes, which can improve the performance and reliability of their dApps. And also by providing access to a large number of nodes, developers can reduce the risk of downtime or network congestion, which can be a common issue when running a single node.

        In summary, INFURA allows developers to "rent" a node in the sense that they can access the resources of the node without having to set up and maintain it themselves, which can save them time and money while also improving the performance and reliability of their dApps.`

Now that all is done in backend, but in the frontend we can simply use metamask wallet or phantom or any wallet - they all do the same thing, they expose some URL, they expose some node - they give us that provider
if you expand and see metamask, all have infura rpc, but these wallets give us a nice way of sticking these rpc to our browser

now let's do it, 6 ways to do it:
1. HTML/JS
2. NextJS + React and "raw" ethers
3. NextJS + "web3-react"
4. NextJS + "react-moralis"
5. NextJS + "web3Modal"
6. NextJS + "useDapp"

NOTES in their respective folders



//its going to be fun!!!


NEXTJS SETUP
just `yarn create next-app .`
and a general walkthru to all the folders


MANUAL HEADER I
just make a folder components/Header.js - export it and display it

then do this, as we are connecting metamask with our frontend
 - `yarn add moralis-v1 react-moralis`
and notice we didnt do --dev here, ie we didnt install them as dev dependancies - coz we need react-moralis in the production build too, unlike prettier

now all that moralis voodoo - cover app.js with <MoralisProvider></MoralisProvider>
use enableWeb3 hook in your header.js



REACT HOOKS
We could've used simple variables - like doing connected = false to connected = true, but the functionality states gives us is that whenever a state is changed, it re-renders the page, and we want that!
Hooks are a way to work with states, like here : const { enableWeb3 } = useMoralis(), enableWeb3 is a function that the useMoralis hook gives us
also allows us to keep track of states between renders.



MANUAL HEADER II
Just made a connect button and used the fnc enableWeb3
now get `account` function from useMoralis hook and make a terniary operator



USE EFFECT HOOK
takes a fnc as its first parameter and a dependancy array as the second parameter
useEffect() will constantly run and see if ... whatever it is in the dependancy array has changed or not, if it changes, it is going to run the function(the first parameter)

runs twice at the beginning because of strict mode

and if you don't give any dependancy array, it will run everytime something re-renders
blank dependancy array: run once in the start (twice in the strict mode)



WEB3UIKIT
super ez and useful ui kit, get ui components directly from there



INTRO TO CALLING FUNCTION IN NEXTJS
for our enter raffle button, making a new component lotteryenterance.js
we need a function that will call the enter raffle function in our contract, we can either do the traditional way with js and raw ethers, but again it wont re-render stuff, so we'll use our fav Moralis here

a ez pz hook called useWeb3Contract() can do everything here

runContractFunction from useWeb3Contract is the one that executes function onclick, see this from the docs:

        const ShowUniswapObserveValues = () => {
        const { data, error, runContractFunction, isFetching, isLoading } =
        useWeb3Contract({
        abi: usdcEthPoolAbi,
        contractAddress: usdcEthPoolAddress,
        functionName: "observe",
        params: {
                secondsAgos: [0, 10],
        },
        });

        return (
        <div>
        {error && <ErrorMessage error={error} />}
        <button onClick={() => runContractFunction()} disabled={isFetching}>
                Fetch data
        </button>
        {data && <pre>{JSON.stringify(data)}</pre>}
        </div>
        );
        };

        HEREBY we can see that runContractFunction can both send transactions and read the state

and in our code, we just renamed runContractFunction to enterRaffle by doing this: 
        const {runContractFunction: enterRaffle} = useWeb3Contract({
                pass in the parameters;
        })


AUTOMATIC UI UPDATER
what we can do is, create a update script in our backend, that will update if there's any change in our contractAddress, or any function or anything, and that change frontend can check and reflect (in a folder constants.js in the frontend) - completely automated

wrote the update-fronted script in our hardhat lottery backend (lesson 9 in deploy folder)

now, using the runContractFunction, giving in all the params, also the chain Id (it gives the hex version of our chainId) can be directly given as connectButton function in our header file passes what chainId we are connected to (and other info) to the Moralis provider

                const { chainId: chainIdHex } = useMoralis();
                this means pull out the chainId object and name it as chainIdHex



RUNCONTRACTFUNCTION AND USESTATE
basically, we are using Moralis sdk and hooks to make things ezpz, earlier we did all that sending transactions by getting an instance of the contract with raw ethers, moralis and other SDKs help us by doing all that just with the help of one or two hooks/functions.

like here we used useWeb3Contract() hook to get an instance and call the function on the contract, similarly now lets get read the entrance fee from the contract and render it on the UI: check the code of LotteryEntance.js



CALLING FUNCTIONS IN NEXTJS
using the runContractFunction: enterRaffle now
and rest, put a terniary condition in return() that if raffleAddress exists, then <div> button for enterRaffle and entranceFee displayed</div> else "no raffle address detected", thats it.



USENOTIFICATION
useNotification hook - we are going to use the library web3uikit

so, a NotificationProvider inside the MoralisProvider but wrapping the <Component></Component>

useNotification hook returns a dispatch, which will pop up.

NOTE* add onError: (error) => console.log(error) to all your runContractFunction as even if they break, you won't know it!

now, lets pass in the params onSuccess and onError to await enterRaffle()

and then make the handleSuccess and handleNotification function (see the code)



Reading and Displaying Contract Data
get the numberOfPlayers and recentWinner here, fine i'll do it myself

now its not rendering itself, you gotta refresh to see the number of players increase, so to fix that - put updateUI() inside handlesuccess function so that it gets called and state gets re-rendered everytime there is a successful enterRaffle function executed.

also the onSuccess method is not checking the block confirmation, its just checking if the transaction was sent to Metamask successfully and that's why we gotta do tx.wait(1) in handleSuccess function to wait for 1 block confirmation



TAILWIND AND STYLING
there are 2 styling things, first component libraries like web3uikit that gives us component and their block of codes and second is the CSS libraries that do the formatting and styling part
go to TAILWIND docs and go the installing tailwind in nextjs, perform all those commands
Its all about searching for cmds on tailwind docs and applying here, take the help of google and chatGPT, you'll get good in CSS too with practice and more projects!



HOSTING YOUR SITE
intro



IPFS
basically Decentralized Storage 
it is kind of like blockchain but it isn't blockchain - it takes our data and hashes it
we can hash our data on our IPFS node and then we can pin our data/file/code to our node
other nodes can pin our hash and then they will get a copy of our data in their node

its on the node operators on how much data and what data they pin on a node - therefore a node can be of megabytes as well as of terrabytes
READ THIS - []



HOSTING ON IPFS
do it with fleek (helpful without doing manual setup + automatic deploying after committing changes on github + one more url given for those who don't have IPFS companion/connector in their browsers)



FILECOIN
Protocol Labs working on both IPFS and FILECOIN.
Problem w/ IPFS is that other nodes need to pin our data to make it truely decentralized, but FILECOIN can solve this as its a decentralized blockchain for data Storage(how? idk lets see ahead)

IPFS - InterPlanetary File System

Computer    -----   file://path/to/index.html
Web2        -----   http://domain.com//path/to/index.html   (IP + Port)
IPFS        -----   ipfs://[CID]/path/to/index.html

IPFS addresses content by what it is instead of where it is!
It replaces a folder or file location by its CID (Content ID)

                Content -----Cryptographic Hash Function-----> CID (Content Identifier)

CID can be reproduced anytime from the same content

**THE PROBLEM is that who is going to ensure persistence and permanence(remaining unchanged undefinitely) of your data/all the data 

