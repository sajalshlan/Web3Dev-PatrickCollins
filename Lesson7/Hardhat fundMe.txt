It's so much fun to code smart contracts yo!
mere muhn se nikal gayi :(

LINTING
solhint - solidity linter - linting is a process of running a program that will analyse code for potential errors - will give warnings and errors and best practices to write and format our code
    yarn hardhat solhint contracts/*.sol



HARDHAT DEPLOY
keeping track of all of our deploys can get tricky- so install a package called hardhat-deploy - a hardhat plugin for replicable deployments and easy testing
    the 2 evergreen process for downloading any package/plugin:
    1. yarn add --dev hardhat-deploy
    2. require("hardhat-deploy")             in the hardhat config file

now delete the deploy file from scripts folder, and we will create a new deploy folder - and we will be writing our scripts here - and our yarn hardhat deploy will look here for modules - i.e, whenever we will run yarn hardhat deploy, all the scripts in the folder deploy will get executed.

    also, just add one more package (need to override the hardhat-ethers package with hardhat-deploy-ethers)

    yarn add --dev @nomiclabs/hardhat-ethers@npm:hardhat-deploy-ethers ethers

    this will enable ethers to keep track of every deployment

 now the deploy function traditionally was like:
    //import
    //define main function
    //call main function

but now, it will look like (given in the hardhat-deploy script)
    after running the function yarn hardhat deploy - the hardhat passes a 'hre' object to the async function as a parameter, from which we obtain the things we need using destructuring of arrays.
    
    module.exports = async ({ getNamedAccounts, deployments }) => {
        const { deploy, log } = deployments
        const { deployer } = await getNamedAccounts()
        const chainId = network.config.chainId
    }

    //we use namedAccounts, a method  given by the ethers library to easily game name to those different private key spots, mentioned in the network section of config file

    so, in config file
    namedAccounts: {
        deployer: {
            default: 0,
            //different network mai different position:
            31337: 1,
        },
    },
 


MOCKING & HELPER-HARDHAT-CONFIG
 we would want to deploy to the testnet as our last option coz its very slow, or only for testing - better to deploy on local network before

 so, our current fundme.sol includes use of chainlink price feeds, that has a contract address hardcoded - and if we playing on our local hardhat node, no chainlink oracles are monitoring it, unlike testnets, so how can we work with price feeds or hard coded data here???
 solution - mocking

Mocking -> An object under test may have dependencies on other (complex) objects. To isolate the behaviour of the object you want to test you replace the other objects by mocks that simulate the behaviour of the real objects. This is useful if the real objects are impractical to incorporate into the unit test.

In short, mocking is creating objects that simulate the behaviour of real objects.

 so, when going for localhost or hardhat network, we want to use a mock


 we will use aave protocol here for that functionality-> x chain - y address
                                                      -> z chain - a address

    make a new file - helper-hardhat-config
    then do this:

    const networkConfig = {
        5: {
            name: "goerli",
            ethUsdPriceFeed: "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e",
        },
        // 137: {
        //     name: "polygon",
        //     ethUsdPriceFeed: "",
        // },   
        //31337
    }

    but what about our localhost? - we have priceFeedAddress for our testnets but we don't have a priceFeedAddress for our localhost/hardhat node - so we will mock a AggregatorV3Interface

    if the contract doesn't exist, we deploy a minimal version for our local testing

    use module.exports.tags = ["all","mocks"]    in the end.

    when you do - yarn hardhat node -> our local blockchain node will come and it will have both the deploy scripts executed already,

*IMP THING:
    An interface object gets compiled down to an ABI and when you match that ABI with an address -> you get a contract.   

**IMP THING: 
    this: 
    const {helperConfig} = require("../helper-hardhat-config")

    is same as:
    const networkConfig = require("../helper-hardhat-config")  //networkConfig takes the whole file
    const helperConfig = networkConfig.helperConfig

//getNamedAccounts shit
basically i am ded



UTILS FOLDER
this includes the auto programmatic verification/
add your verify.js file here, then export and stuff



SOLIDITY STYLE GUIDE

Layout contract elements in the following order:
    Pragma statements
    Import statements
    Error statements
    Interfaces
    Libraries
    Contracts

Inside each contract, library or interface, use the following order:
    Type declarations
    State variables
    Events
    Errors
    Modifiers
    Functions

In functions:
    constructor
    receive
    fallback
    external
    public
    internal
    private
    view/pure

READ about natspec here: [https://docs.soliditylang.org/en/latest/style-guide.html#natspec]



TESTING FUND ME - you gotta see the FundMe.test.js
making 2 folders in /test/ -> staging and unit
Unit test - done locally - test units/small pieces of our contract to see if they work efficiently
on - local hardhat
   - forked hardhat

staging test - done on a testnet

    Diff btw Mocha, Chai, Waffle
   ./while Waffle and Mocha are both test frameworks and chai is a assertion library, they are used for different things.

    Mocha runs your tests, as defined with describe, it, etc.
    Chai asserts that the values in your tests are correct. (expect, assert)
    Waffle provides tools for compiling and deploying contracts, functions for testing contracts, contract mocks, extra Chai assertions etc. It can be used in addition to Mocha (as well as other test runners like Jest), Waffle does not run tests itself.

Keep checking solidity coverage in btw - yarn hardhat coverage - to see how much lines we covered and how much left.



BREAKPOINTS & DEBUGGING
using breakpoints and javascript debugger
also, you can add and import hardhat-console.sol -> and then use console.log() statements in our solidity contract as if it is a javascript file. - helpful in debugging.



TESTING FUND ME II - you gotta see the FundMe.test.js

we tested withdrawing eth with one funder, now let's test that with multiple funders. 

Fixture helps us run our deploy folder with as many tags possible
        await deployments.fixture(["all"])

ethers.getContract("FundMe", ) -> gives us the most recently deployed version of the FundMe contract and then with deployer, we can give an account to make transactions with - so give deployer by getNamedAccounts:

    const {deployer} = await getNamedAccounts()

    another way to do that:

    const accounts = await ethers.getSigners()     /gets all accounts for us
    const accountZero = accounts[0]          /and for hardhat network - gets 10 fake addresses
    

didn't understand this line:
    await expect(fundMe.funders(0)).to.be.reverted

//one thing to note here, we are connected accounts to the fundMe contract and not just addresses.



STORAGE IN SOLIDITY
2 types of storage locations - memory and storage.
Memory - created with the contract and all the variables/functions with memory location gets wiped out when the work with the contract is done - i.e, made only for the duration of function running.
Storage - solidity stores all the state variables(global variables) in chunks of 32 bit areas, stores array with its length and for mapping data structure it keeps the location empty by which solidity will understand that there's a mapping here. Dynamic data structures like array use hashing function to deal with their content/values (maybe keccak256, read in the docs)

any variables/arrays that we want to persist for all transactions - we store them in a giant array called as Storage, that just costs more.
Loading word to storage and saving word to storage is two of the most gas expensive calls.

memory, constant and immutable variables don't go into the Storage.

Used in gas optimization - read solidity docs for more
[https://docs.soliditylang.org/en/latest/internals/layout_in_storage.html]



GAS OPTIMATION USING STORAGE KNOWLEDGE
first update the name of all the storage variables -give them a prefix - 's_'

basically doing changes for gas optimization - reduce the number of operations with state variables as mul, div, add, comparing - anything with storage costs more gas than dealing with memory variables.
so made a cheaperWithdraw() function, tested it, and it did save a lil gas (by viewing gas reporter.txt).
see the difference btw the functions: 

    function withdraw() public onlyOwner {
        for (uint256 funderIndex=0; funderIndex < s_funders.length; funderIndex++){
            address funder = s_funders[funderIndex];
            s_addressToAmountFunded[funder] = 0;
        }
        s_funders = new address[](0);
        
        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}("");
        require(callSuccess, "Call failed");
    }
    
    function cheaperWithdraw() public onlyOwner{
        address[] memory funders = s_funders;
        for(uint funderIndex=0;funderIndex<funders.length;funderIndex++){
            address funder = funders[funderIndex];
            s_addressToAmountFunded[funder]=0;
        }
        s_funders = new address[](0);
        (bool callSuccess, ) = i_owner.call{value: address(this).balance}("");
        require(callSuccess, "Call failed");

    }


//in cheaperWithdraw(), we are not constantly looping over the s_funders and reading and obtaining the funder from that, we made a memory array of funders, saved all the gas by reading from memory array rather than storage array.



SOLIDITY CHAINLINK STYLE GUIDE
devs/users interacting with your fundMe contract don't want to deal with all these s_ variables, doesn't look good/clean.
so make some view return functions with proper names at the end (view functions in the end acc to style guide), and then return those s_ variables there.



ADDING SCRIPTS TO YOUR PACKAGE.JSON
    "scripts": {
        "test": "hardhat test",
        "test:staging": "hardhat test --network goerli",
        "lint": "solhint 'contracts/**/*.sol'",
        "lint:fix": "solhint 'contracts/**/*.sol' --fix",
        "format": "prettier --write .",
        "coverage": "hardhat coverage"
       }

I am curious to new tools
I try them out and make them work for me
that's how you get comfortable with new things quickly

The future belongs to those who learn more skills and combine them in creative ways.
                                                            - Robert Greene, Mastery

/////