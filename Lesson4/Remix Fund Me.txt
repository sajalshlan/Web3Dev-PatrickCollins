ITS GOING TO BE FUN!

aim:
1. get funds from user
2. withdraw funds
3. set a minimum funding amount acc to USD

SENDING ETH THROUGH A FUNCTION AND REVERTS
*Payable keyword:
Smart contracts can hold funds just as wallets can - because smart contracts are alloted address same as a wallet - so both wallets and contracts can hold native tokens like ethereum 

*msg.value keyword:
a global variable to get how much value somebody is sending

Money math is done in terms of wei - so 1 eth needs to be set as 1e18 value -> 1e18 = 1* 10 ** 18.

*require keyword:
if you want something to happen and the whole smart contract should fail if that doesn't happen - use require
syntax -> require(condition, revert statement)
reverting means undo any action before, and send remaining gas back
- means if there are computations after the require function, only that gas will be spent that is involved above the require function, although all the computations will be undo/reversed back and the extra gas we had for further computations will be returned back to you.



CHAINLINK & ORACLES
Oracle - any device that interacts with offchain world to provide external data or computations to smart contracts.
We've already read about Oracle network from Chainlink
Better read this - [https://github.com/smartcontractkit/full-blockchain-solidity-course-js#chainlink--oracles]

Chainlink features - plugins that can be used in our smart contract

*Chainlink Data Feeds:
Supports the growth of DEFI Ecosystem
Exchanges > Data Providers > Chainlink Nodes > Reference Contract > User Contract

whenever we request data from these oracle nodes - a oracle node delivers data, we have to pay a oracle fee (just like the transaction fee) in chainlink token
all these nodes deliver data to a single node, which further delivers the data with signatures of the nodes to a "reference" smart contract that is present on chain, via which other smart contracts on the blockchain takes in the data feed.

*Chainlink VRF(Verifyable randomness function): 
Securing randomness
blockchain are deterministic systems, that is they can't have randomness.
chainlink vrf can help us get a provably random number - to guarantee randomness and fairness in our applications
many protocols like - pool together, axie infinity, EtherCards, aavegotchis, etc used chainlink VRF for lotteries, randomizing NFTs, for gaming and more.

Artists(creates unique digital artworks) > EtherCards Framework(provides tools for NFT creation) > Chainlink VRF(each minted nft uses vrf to assign provably rare traits) > NFTs with randomized traits(rarity secured by chainlink)

*Chainlink Keepers:
Decentralized Event-Driven Execution

Keepers are the chainlink nodes that listen to the registration contract for different events specify to fire
chainlink nodes constantly listen to these triggers to happen and checks different contracts for these triggers - once these triggers return true, chainlink nodes will perform whatever action that you've coded.


 
REVIEW OF SENDING ETH & WORKING WITH CHAINLINK
recap tha



INTERFACES & PRICE FEEDS

Interfaces allow us to specify the expected behavior of a contract without having to specify the actual implementation, which can make it easier to change or upgrade the implementation without affecting the rest of the system.

To interact with a contract outside of our contract, we need 2 things -

1. ABI of the contract - basically a list of the functions by which you interact with a contract- only the name,type of the functions and doesn't include the logic of the function - the list of different functions and interactions that you can call > we use the concept of interface to get the ABI.

these interfaces when compiled gives us ABI - as needed, to use in our smart contract without going into the logic of the functions that we'll be using - those logic being written safely and securely and no one can override them.

thus makes interfaces a really easy way to interact with contracts outside our contract

when we add the contract's address with our interfaces, we can use all functions present on that interface in our contract based on the contract's address we have taken as a parameter inside the interface function.

2. Address of the contract



IMPORTING FROM GITHUB AND NPM
Instead of copying and pasting all these interfaces at the top of our code - making it bigger and uglier - we can instead use our fav keyword = import "".

but remember, to use import, we should have that interface that needs to be imported in our files, then iska matlab we again need to create a new interface.sol file and then import it

INStead - we will use github links to import directly from github - our traditional npm packages.
- import "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol";



FLOATING POINT MATH IN SOLIDITY
understandable with code:
    //SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

import "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol";

contract FundMe {

    uint public minimumUsd = 50 * 1e18;

     function fund() public payable{
         //want to be able to set a fixed min amount in eth
         require(getConversionRate(msg.value) >= minimumUsd, "Didn't send enough");
     }

     function getPrice() public view returns (uint256) {
         //abi
         //address 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419

         AggregatorV3Interface priceFeed = AggregatorV3Interface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);
         (, int256 price,,,) = priceFeed.latestRoundData();

         //now got eth without decimal points and only with 8 zeroes, but need 18 acc to msg.value
         return uint256(price * 1e10);
     }

     function getConversionRate(uint ethAmount) public view returns(uint) {
         uint ethPrice = getPrice();
         uint ethAmountInUsd = (ethAmount * ethPrice)/1e18;
         return ethAmountInUsd;
     }
}

BASIC SOLIDITY ARRAYS AND STRUCTS II
understandable with code:

    contract FundMe {

    uint public minimumUsd = 50 * 1e18;
    address[] public funders;
    mapping(address => uint256) public addressToAmountFunded;

     function fund() public payable{
         //want to be able to set a fixed min amount in eth

         require(getConversionRate(msg.value) >= minimumUsd, "Didn't send enough");

         funders.push[msg.sender];
         addressToAmountFunded[msg.sender] = msg.value;

     }
    }


LIBRARIES
libraries can't have any state variables and they also can't send any ether and all the functions are going to be internal

Aim is to minimize code and make it look clean so - what if we could use msg.value.getConversionRate() -> i.e, directly attaching a method/function to a uint variable as if it's a struct/array.

we can do that with the help of library

    make a library first, ex- PriceConverter.sol
    now in FundMe.sol, import this library - 
        import "./PriceConverter.sol"

    now inside the FundMe contract - 
        contract FundMe {
           using PriceConverter for uint256;
        }

that's it, now we can do what we wanted to, i.e, msg.value.getConversionRate();
BUT if you noticed, the original function getConversionRate() which we shifted to our library PriceConverter.sol, had a parameter to take as input (ethAmount), but when using msg.value.getConversionRate(), we don't take in the input ---> actually the msg.value is consider to be the first parameter.

IF we want to add a second parameter to the function getConversionRate() in our library, we will add it like this:

    IN LIBRARY:
        function getConversionRate(uint ethAmount, uint somethingElse)

    IN OUR CONTRACT
        msg.value.getConversionRate(123);

here --> msg.value = ethAmount and 123 = somethingElse.



UNCHECKED KEYWORD
used to be there by default before solidity version 0.76, but now it is fixed and same as adding a unchecked keyword before the code.

basically what it does it, when I take a variable uint8, it could store a max number 255, but if I make a function that would add 1 to the variable - i.e, overflow will happen and the value of the variable will become 0 - a not needed feature usually -> solidity ^0.8 fixed that.



BASIC SOLIDITY FOR LOOP, RESETTING AN ARRAYS
already known
Resetting -> funders = new address[](0);

The line above creates a new array of addresses called "funders" with a size of 0. 
The "new address[]" part of the statement creates a new array of addresses, and the "(0)" part specifies that the array should have a size of 0 elements.



SENDING ETH TO CONTRACT
3 ways : transfer, send, call
watch again, 4.42.00



BASIC SOLIDITY CONSTRUCTORS & MODIFIERS
Whosoever deploys this contract at first should be set as owner of this contract, so that only the owner can call the withdraw function to withdraw the funds, to do that we will use constructors 
Constructor is a function that gets called immediately when a contract is deployed.
    address public owner;

    constructor() {
        owner = msg.sender;
    }


Modifiers/ 
a modifier is a keyword that we can add right in any function declaration, ex-
    modifier onlyOwner{
        require(msg.sender == owner, "sender is not owner!");
        _;
    }

underscore represents doing the rest of the code.



ADVANCED SOLIDITY CONCEPTS

~ CONSTANT Keyword - use constant keyword if you're sure that your variable is going to hold a constant value - can only be declared one time.
convention - name of the constant variable is written using capital letters and underscore. ex- uint256 public constant MINIMUM_USD = 50 * 1*e18;

used for gas optimization - gas savings are pretty good, about a $1 is saved just by using this constant keyword.


~ IMMUTABLE keyword - variables that we set one time but outside of the same line where they are declared - can be declared one more time but only inside the constructor.
convention - 'i_' as prefix.

very similar gas savings

Both of these saved gas as instead of storing these variables in memory slot, we stored them directly into the bytecode of the contract.


~ Custom Errors
pretty new in solidity - ^0.8.4;
with using require statement, we store the whole string that reverts back if require statement is not satisfied - but we have an alternative method to save gas:
Using if and revert statement and create custom error.

    at the top:
        error NotOwner();

    now in the modifier onlyOwner, removing require and using:
        if(msg.sender!=i_owner){
            revert NotOwner();
        }

It's so fun ngl

~ Receive and Fallback
what happens if someone sends this contract eth without callin the fund function, using receive and fallback, we can route the transactions (incoming eth or data) to our fund function.

//Receive 
A contract can have at most one receive function, declared using receive() external payable { ... } (without the function keyword). This function cannot have arguments, cannot return anything and must have external visibility and payable state mutability. It can be virtual, can override and can have modifiers.

    // SPDX-License-Identifier: MIT
    pragma solidity ^0.8.7;

    contract FallbackExample {
        uint256 public result;

        // Fallback function must be declared as external.
            fallback() external payable {
            result = 1;
        }

        receive() external payable {
            result = 2;
        }
}

    // Explainer from: https://solidity-by-example.org/fallback/
    // Ether is sent to contract
    //      is msg.data empty? (whether sending by calldata or by metamask directly)
    //          /   \ 
    //         yes  no
    //         /     \
    //    receive()?  fallback() 
    //     /   \ 
    //   yes   no
    //  /        \
    //receive()  fallback()

    DONE YEAHHH